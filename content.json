[{"title":"03：一个解释 & 一个Tips","date":"2017-03-09T14:22:26.000Z","path":"2017/03/09/一个解释-一个Tips/","text":"首先present文章烂尾的原因如果居然有人在茫茫的互联网世界发现了这个角落，并且居然看过《一个文科生折腾Hexo+GitHub的血泪史》的话，那么很悲伤地通知您，不会有下篇了，因为我发现了这个和这个： Iisnan的NexT主题以及与之配套的网站 在认真地学习了这个网站上的内容之后，我献上了卑微的膝盖，人与人之间的差距真的是好残忍地大哟，随便看了几篇教程就觉得理科生讲不清楚事的傲娇心态受到了深深的打击哟，我觉得自己就是大写的： 在摆不清位置之前胡说八道可以，但是看到了差距如果还不闭嘴那就是纯的…… 所以，如果有人居然真的不可思议到极致地关注到这个角落并且也对建站感兴趣的话，请点击这个链接：NexT主题的教程网站 ，这样都学不会那就真的是…… 好了，收拾一下心情，紧接着…… 我要继续厚颜无耻地提供一个Tips脚注（footnote）是一个很酷炫的技能，差不多就是这样脚注。 除了装逼之外，脚注也非常实用，特别是对一篇比较长文章而言，适当地增加脚注能帮助读者更好地理解作者的意图。很多支持Markdown语言渲染的网站都支持脚注功能，使用的语法也非常简单，一般就是在需要增加脚注的文字后面，比如“我要添加脚注[^footnote]”，增加这么一个[^XX]，在文章的最后另起一行，添加一个“[footnote]: XXXX”就行。 然而，GitHub并不支持这个酷炫的功能。我翻遍了GitHub Favored Markdown的介绍，就是木有这个功能；后来又通过度娘找了一个晚上，也不知道是度娘蠢还是我蠢，就是没有找到解决方案。 事已至此，我只能拿出梯子“翻墙”了，找到失散多年的Google，把 “github favored markdown footnote” 这几个关键词输进去，一个回车，映入眼帘的第一条搜索记录就是来自Stackoverflow.com的问题： How to add footnotes to GitHub-flavoured Markdown? 我内心对度娘的感觉是这样的： 赶紧点进去，发现第一个哥们已经给了一个马马虎虎可以糊弄过去的解决方案，那就是Fake it！ GitHub Flavored Markdown doesn’t support footnotes, but you can manually fake it¹ with Unicode characters or superscript tags, e.g. &lt;sup&gt;1&lt;/sup&gt;. Of course this isn’t ideal, as you are now responsible for maintaining the numbering of your footnotes. It works reasonably well if you only have one or two, though.By Chris 天才啊！我这边还在感慨呢，下面一位牛人跳出来了了。 额，顺着这个思路的话，只要把footnote定义一下就可以跳转了哟 &lt;sup&gt;[1](#myfootnote1)&lt;/sup&gt; 然后在文章后面添加上这个： &lt;a name=&quot;myfootnote1&quot;&gt;1&lt;/a&gt;: By Surya Sankar 完美啊！！ 可是还没完，最后一位大神出马了。他说： 顺着这个思路再走远一点，定义一下起始的位置，在footnote的结尾加上回来的箭头，完美实现了footnote的功能哟在需要标注的文字后面写上如下代码： Bla bla &lt;sup id=&quot;a1&quot;&gt;[1](#f1)&lt;/sup&gt; 然后在文章的最后敲下： &lt;b id=&quot;f1&quot;&gt;1&lt;/b&gt; Footnote content here. [↩](#a1) 还有一个贴心的 ↩ 返回箭头哟 By Matteo 大神啊！！我只有一个反应…… 最后总结一下回顾“探寻脚注破解之法”的整个过程，我收获了两个简单道理： 度娘靠不住 英语很重要 以上就是博文的全部内容了，拜拜","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"建站","slug":"建站","permalink":"http://yoursite.com/tags/建站/"},{"name":"脚注","slug":"脚注","permalink":"http://yoursite.com/tags/脚注/"}]},{"title":"02：关于放弃维权的艰难决定和支撑这个决定的几个理由","date":"2017-03-05T14:42:43.000Z","path":"2017/03/05/关于放弃维权的艰难决定和支撑这个决定的几个理由/","text":"我决定放弃不知何故没有收到的网易严选价值148元商品的维权权利，理由如下：维权的时间成本和情绪成本太高，不划算。 4天前的12月19日，我在网易严选上购买了日式多功能颈枕和多功能午睡枕，希望作为夫人和我的圣诞礼物，以解决夫人特别怕冷，以及我中午睡觉的问题。2天前，也就是12月21日中午，顺丰快递员告知我快递已经到了，我跟往常一样让他放在门房处；然而，昨天并没有找到这个快递，于是我致电快递员。快递员今天再过去找，于下午3点半左右告知我确实找不到，并希望 我去物业调取监控资料，我告诉他物业上班我也上班，下班我也下班，没有精力去查这些，然后告诉他我会如实跟网易严选说明清楚。快递员遂语气不善，表示自己冤得要死，是我让他放在门房的，接下来我们就开始了毫无意义的争执，3分钟后我挂掉了他的电话，后来用了半小时平复不爽的心情。维权是需要时间成本的，当可以预期的收益不会大于148元时，是否还需要去争个子丑演卯？更何况，还有情绪成本呢。 我也存在过错。 快递行业的规定，本来就要求快递员必须把快递件送到我的手上，是我自己没有坚持这个规定。 尽量不要跟垃圾人靠近。 顺丰快递员可以说是行业里素质最高的了，但是这个快递小哥依旧严重缺乏沟通技巧，几句话下来就让我火冒三丈，让我禁不住萌生了好好教训他一顿的冲动，并准备拨打95528将冲动化为行动，正在千钧一发之际，我突然冷静了下来，然后转念一想，我为什么要跟快递小哥来劲呢？教训他一顿能给我带来什么好处呢？而且，如果他虚心受教还好，如果冥顽不灵的话，我为什么要给一个知道我的地址、知道我电话号码，知道我的姓名的人恨我的机会呢？而从电话中的语气和措辞判断，小哥肯定不会是一个虚心受教的人。再深入思考一点，如果快递小哥属于那种传说中的变态，气不过铤而走险的话，我不是把自己和家人置于危险的境地吗？垃圾人定律第一条，千万不要跟他们靠近。小孩才分对错，大人只看利弊。 最后，这件事情的教训就是： 不要心存侥幸，也不要随波逐流，更不要偷懒，保护自己权益的办法一直都有，既然自己选择了不用就要承担不用的代价。 以后快递的地址可以使用千米网或菜鸟裹裹的快递代收点，一则规避快件丢失的风险，二则避免别有用心之人获悉我的地址。 已经损失的148元是沉没成本，无论是否获得赔偿，损失其实已经形成，那么就让这个损失变成我自己的教训，还是不要便宜了快递小哥了吧。","tags":[{"name":"感悟","slug":"感悟","permalink":"http://yoursite.com/tags/感悟/"},{"name":"吐槽","slug":"吐槽","permalink":"http://yoursite.com/tags/吐槽/"}]},{"title":"01：一个文科生折腾Hexo+GitHub的血泪史（上篇）","date":"2017-03-02T13:47:08.000Z","path":"2017/03/02/一个文科生折腾Hexo-GitHub的血泪史/","text":"一个文科生，真的无法在这个代码的世界里生存吗？By 尼古拉斯·赵四 周二早晨（现在是周四），我在班车上刷知乎，寻找睡意，一个叫 崔斯特 的家伙一篇专栏文章 教你免费搭建个人博客，Hexo&amp;Github 突然出现在我的timeline上，于是我百无聊赖地点进去，这一点不得了，一扇通往未知世界的大门自此打开，充满好奇的本宝宝义无反顾地跳了进去，带着无畏的勇气，我用自己的肉身体验了建站路上一个又一个的坑，短短48小时，懵逼了无数次，历尽千难万险之后，终于把自己的 博客 弄了出来，回首已经过去的48小时，我心潮澎湃，不能自己，非常确定以及肯定了这个代码世界对于文科生的恶意，于是，我暗暗咬了下嘴唇，迎着夕阳立下一个心愿：我一定要写一篇文科生能看懂的建站教程。 此为前言。 崔斯特先生的文章 教你免费搭建个人博客，Hexo&amp;Github 其实讲的蛮深入浅出的，特别是和我后来从度娘上扒回来的其他教程对比，操作性满分，可是，几乎所有教程都有一个问题，谈到建站，马上就是“什么是Hexo？”啊，“如何配置GitHub”啊这些干货满满的内容，可人家是文科生啊，没有一点点心理准备你就跟我讲环境配置，尽管我非常努力地看下去了，但是我的内心一直都是懵逼的…… 对的，事实上…… 为什么要下载node？为什么要下载Git？为什么要注册GitHub？为什么要敲那些指令？为什要改_config.xml的配置？ 为什么要下载sublime来编辑文档？Windows不是自带了一个记事本吗？Markdown又是什么鬼？写字就写字，搞这些乱七八糟的符号有什么用，不会用word吗？ 还要编译，编译是什么鬼？还有，要新建一个仓库哟，英文叫repository，这又是什么意思？还有还有，要去注册一个.me的域名，逼格才高，不过要做好映射哟亲…… 我艹，为什么呀，映射到底是什么东西呀？这些东西你们都是默认大家懂的吗？作为一个教程这么高冷好吗？！ 面对这些教程，我只想认真地说： 这个代码的世界充满了对文科生的歧视，为了打破这种不平等，我呕心沥血72个小时，终于整出来一份真正的入门级教程，只要你有正常的阅读能力和基本的英语水平，你就能明白上面那些名词的意思，你就能知道其实并没有那么复杂，之所以看起来那么复杂，只不过是理科生们讲不清楚而已。 本教程依赖于 崔斯特先生 的教程。 开始之前，理清思路在开始之前，我们先把思路捋一捋。 我们的目标是想搭建一个拥有独立域名的，逼格满满的个人博客。 那么，第一件事就是必须搞清楚，博客是什么。 不十分精确地说，它一个网站平台，它由许多个网页，按照一定的规则整合在一起，并且彼此之间互相连接。本质上，博客就是一堆按照一定的结构互相连接的网页的集合。 如果我们把博客平台比喻成一个房子，那么我们要建一个博客就差不多等于建一个房子，要建房子的第一要务就是：拿快递，哦不，是拿块地！注册了GitHub 1 之后，你就可以申请一块“地”，这块地英文叫做repository，中文被称为“仓库”或者“代码库”，GitHub会给你这块地分配一个全球唯一的IP地址，那就是你的门牌号码。 好了，有了地之后就可以开工了，这时你就会碰到一个问题，我想建一个什么风格的“房子”（博客平台）呢？“房子”的风格有很多可以选，mainTao的 hexo入门指南 对三种主流的博客平台：Ghost、JekyII和Hexo进行了逐一点评，最后告诉我们，Hexo是一个静态网页平台，逼格最高，最省事，也最安全（静态网站 2 ）。于是，什么都不懂的我们就很自然的选择了建一个Hexo风格的“房子”（博客平台）。 建房子总得打地基吧，可Hexo这个“房子”比较挑剔，它必须建在Node.js 3 的地基上面，不然就掀桌子不干。于是，我们还得去下载和安装Node.js。 还没完，由于你这块地是跟GitHub申请的，所以人家GitHub的“物业”说了，你要建房子可不能随随便便推个三轮车就进去，必须用他们家的“Git牌手推车”，不然老这么进进出出的谁知道你会不会压坏了人家的地砖呢，因此咱们还必须老老实实下载一个Git系统 4 （分布式版本控制系统），乖乖领个车。 上面这些话转换成示意图如下所示： ok，建站的思路我们就捋出来了： 拿块地：注册和配置GitHub打地基：安装Node.js领个车：安装Git建房子：安装和配置Hexo 第一步：拿块地！注册和配置GitHub。这里完全复制 崔斯特先生 的教程： 首先注册、登录 https://github.com/记住自己的Username（很重要）然后右上角选择 Create a new repository https://github.com/newRepository name 填自己的名字 http://yourname.github.io(yourname与你的注册用户名一致,这个就是你博客的域名了)例如，我的域名是http://github.com/zhihuya，就填入http://zhihuya.github.io。成功后出现下面的画面。 第二步&amp;第三步：打地基和领个车！安装Node.js和Git这里又是复制 崔斯特先生 的教程： 安装 Node.js 下载后安装，一路next就好。 安装 Git waylau/git-for-win: Git for Windows. 国内直接从官网下载比较困难，需要翻墙。这里提供一个国内的 下载站，方便网友下载 安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，名称和邮箱是Github上的 慢着！这两个指令什么意思？很好，我灰常欣赏这种打破砂锅问到底的孩子！ 初次运行Git的时候，程序员们要配置一下工作环境，这两个指令的意思就是告诉Git，这个电脑提交的任何改动都是小弟我本人做的，我行不改名坐不改姓，就是XXX之类的意思，这些记录都会是永久记录的。详见人家的 官方文档 第四步：建房子！安装和配置Hexo首先，在打开的Git界面上，输入如下的语句并按下回车： $ npm install -g hexo-cli 这句话的意思就是告诉npm（整合在Node.js里面的一种工具），安装hexo-cli。至于”-g”是什么意思，安装hexo不就好了，为什么要用hexo-cli，嗯，我不知道……希望看到这篇文章的程序员朋友们能解答一下吧。 等待了一段时间之后，你就会看到下图这个样子的一堆英文跑出来，说明建站的基础工作你已经做完了。 这时你可以站起来伸伸懒腰，休息一下，我们已经完成了房子的建设工作，接下来就是内部装潢了。 第五步：内部装潢！设置和配置博客平心而论，这部分内容我确实没有 崔斯特先生 写的详细，因此以下内容全部照搬。 先在你希望存放本地博客文件的地方新建一个文件夹，最好用英文命名，谁知道中文会出现什么问题呢，新建文件夹之后，在这个位置点击鼠标右键，选择 Git bash here。 输入 hexo init blog 稍微等待下，速度有点慢。成功提示 INFO Start blogging with Hexo! 因为你初始化hexo 之后source目录下自带一篇hello world文章, 所以直接执行下方命令 $ hexo generate # 启动本地服务器 $ hexo server # 在浏览器输入 http://localhost:4000/就可以看见网页和模板了 INFO Start processing INFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 访问\\http://localhost:4000/\\，便可以看到网站初步的模样，不要激动，我们还要把网页发布到Github上去。 重新打开Git，输入： ssh-keygen -t rsa -C &quot;Github的注册邮箱地址&quot; 一路Enter过来就好，得到信息： Your public key has been saved in /c/Users/user/.ssh/id_rsa.pub. 找到该文件，打开（sublime text），Ctrl + a复制里面的所有内容，然后进入Sign in to GitHub：New SSH key ——Title：blog —— Key：输入刚才复制的—— Add SSH key 这个操作是为了生产一个秘钥，这个秘钥用于本地站点部署到GitHub时双方确认身份，如果不设置这个，每次部署（deploy）的时候都要输入用户名密码，比较麻烦而已。 配置博客在blog目录下，用sublime 5 打开_config.yml文件，修改参数信息 # Hexo Configuration ## Docs: http://hexo.io/docs/configuration.html ## Source: https://github.com/hexojs/hexo/ # Site #站点信息 title: #标题 subtitle: #副标题 description: #站点描述，给搜索引擎看的 author: #作者 email: #电子邮箱 language: zh-CN #语言 # URL #链接格式 url: #网址 root: / #根目录 permalink: :year/:month/:day/:title/ #文章的链接格式 tag_dir: tags #标签目录 archive_dir: archives #存档目录 category_dir: categories #分类目录 code_dir: downloads/code permalink_defaults: # Directory #目录 source_dir: source #源文件目录 public_dir: public #生成的网页文件目录 # Writing #写作 new_post_name: :title.md #新文章标题 default_layout: post #默认的模板，包括 post、page、photo、draft（文章、页面、照片、草稿） titlecase: false #标题转换成大写 external_link: true #在新选项卡中打开连接 filename_case: 0 render_drafts: false post_asset_folder: false relative_link: false highlight: #语法高亮 enable: true #是否启用 line_number: true #显示行号 tab_replace: # Category &amp; Tag #分类和标签 default_category: uncategorized #默认分类 category_map: tag_map: # Archives 2: 开启分页 1: 禁用分页 0: 全部禁用 archive: 2 category: 2 tag: 2 # Server #本地服务器 port: 4000 #端口号 server_ip: localhost #IP 地址 logger: false logger_format: dev # Date / Time format #日期时间格式 date_format: YYYY-MM-DD #参考http://momentjs.com/docs/#/displaying/format/ time_format: H:mm:ss # Pagination #分页 per_page: 10 #每页文章数，设置成 0 禁用分页 pagination_dir: page # Disqus #Disqus评论，替换为多说 disqus_shortname: # Extensions #拓展插件 theme: landscape-plus #主题 exclude_generator: plugins: #插件，例如生成 RSS 和站点地图的 - hexo-generator-feed - hexo-generator-sitemap # Deployment #部署，将 lmintlcx 改成用户名 deploy: type: git repo: 刚刚github创库地址.git branch: master 特别提醒，在每个参数的：后都要加一个空格，修改网站相关信息(其他内容不要修改) title: 崔斯特测试所用博客 subtitle: 副标题 description: 网页描述 author: 崔斯特 language: zh-CN timezone: Asia/Shanghai 配置部署（我的是zhihuya，修改成自己的） deploy: type: git repo: https://github.com/zhihuya/zhihuya.github.io.git branch: master 到了这里，基本上已经完成了整个博客平台的设置工作，接下就是…… 第六步：发表文章、更换主题、添加评论 etc……发表文章在blog的根目录中点击右键，选择Git中输入 $ hexo new &quot;崔斯特测试文章&quot; INFO Created: F:\\test\\blog\\source\\_posts\\崔斯特测试文章.md 找到该文章，打开，使用 Markdown 6 语法，该语法介绍可以查看 利用HEXO搭建的博客及Markdown语法介绍 --- title: 崔斯特测试文章 date: 2017-02-28 13:03:44 tags: --- 这是一篇测试文章，欢迎关注作者博客[1]: https://zhangslob.github.io/ 保存，然后执行下列步骤： F:\\test\\blog $ hexo clean INFO Deleted database. INFO Deleted public folder. F:\\test\\blog $ hexo generate INFO Start processing INFO Files loaded in 1.48 s #省略 INFO 29 files generated in 4.27 s F:\\test\\blog $ hexo server INFO Start processing INFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 这个时候，打开http://localhost:4000/，发现刚才的文章已经成功了 发布到网上最后一步，发布到网上，执行： F:\\test\\blog $ hexo deploy INFO Deploying: git INFO Clearing .deploy_git folder... INFO Copying files from public folder... #省略 其中会跳出Github登录，直接登录。如果没有问题输入zhihuya（换成你的）.http://github.io/崔斯特测试所用博客. 然后就可以看到已经发布了 小结一下 发布文章的步骤： 1、hexo new 创建文章2、Markdown语法编辑文章3、部署（所有打开CMD都是在blog目录下） hexo clean #清除缓存 网页正常情况下可以忽略此条命令 hexo generate #生成 hexo server #启动服务预览，非必要，可本地浏览网页 hexo deploy #部署发布 简写Tips： hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章 hexo p == hexo publish hexo g == hexo generate#生成 hexo s == hexo server #启动服务预览 hexo d == hexo deploy#部署如果在执行 hexo deploy 后,出现 error deployer not found:github 的错误，执行： npm install hexo-deployer-git –save 这篇超级初级的教程就写到这里了，接下来会准备写一写申请域名、设置DNS、更换主题、添加评论框……等等对于单纯的文科生而言硕大无比的坑，敬请期待（如果居然有人在看的话）Sayonara！ 脚注1 GitHub 是一个面向开源及私有软件项目的托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub。GitHub 于 2008 年 4 月 10 日正式上线，除了 Git 代码仓库托管及基本的 Web 管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能。目前，其注册用户已经超过350万，托管版本数量也是非常之多，其中不乏知名开源项目 Ruby on Rails、jQuery、python 等。↩ 2 静态网站：静态网站是指全部由HTML（标准通用标记语言的子集）代码格式页面组成的网站，所有的内容包含在网页文件中。网页上也可以出现各种视觉动态效果，如GIF动画、FLASH动画、滚动字幕等，而网站主要是静态化的页面和代码组成，一般文件名均以htm、html、shtml等为后缀 。每个静态网页都有一个固定的网址，文件名均以htm、html、shtml等为后缀； 静态网页一经发布到服务器上，无论是否被访问，都是一个独立存在的文件； 静态网页的内容相对稳定，不含特殊代码，因此容易被搜索引擎检索；html更加适合SEO搜索引擎优化。 静态网站没有数据库的支持，在网站制作和维护方面工作量较大； 由于不需通过数据库工作，所以静态网页的访问速度比较快。↩ 3 Node.js是一个Javascript运行环境(runtime)。实际上它是对Google V8引擎进行了封装。V8引 擎执行Javascript的速度非常快，性能非常好。Node.js对一些特殊用例进行了优化，提供了替代的API，使得V8在非浏览器环境下运行得更好。 ↩ 4 Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。Git 是 Linus Torvalds（Linux的开发者）为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。Torvalds 开始着手开发 Git 是为了作为一种过渡方案来替代 BitKeeper，后者之前一直是 Linux 内核开发人员在全球使用的主要源代码工具。开放源码社区中的有些人觉得BitKeeper 的许可证并不适合开放源码社区的工作，因此 Torvalds 决定着手研究许可证更为灵活的版本控制系统。尽管最初 Git 的开发是为了辅助 Linux 内核开发的过程，但是我们已经发现在很多其他自由软件项目中也使用了 Git。↩ 5 Sublime 是一个代码编辑器（Sublime Text 2是收费软件，但可以无限期试用），也是HTML和散文先进的文本编辑器。Sublime Text是由程序员Jon Skinner于2008年1月份所开发出来，它最初被设计为一个具有丰富扩展功能的Vim。Sublime Text具有漂亮的用户界面和强大的功能，例如代码缩略图，Python的插件，代码段等。还可自定义键绑定，菜单和工具栏。Sublime Text 的主要功能包括：拼写检查，书签，完整的 Python API ， Goto 功能，即时项目切换，多选择，多窗口等等。Sublime Text 是一个跨平台的编辑器，同时支持Windows、Linux、Mac OS X等操作系统。↩ 6 Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown具有一系列衍生版本，用于扩展Markdown的功能（如表格、脚注、内嵌HTML等等），这些功能原初的Markdown尚不具备，它们能让Markdown转换成更多的格式，例如LaTeX，Docbook。Markdown增强版中比较有名的有Markdown Extra、MultiMarkdown、 Maruku等。这些衍生版本要么基于工具，如Pandoc；要么基于网站，如GitHub和Wikipedia，在语法上基本兼容，但在一些语法和渲染效果上有改动。↩","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"http://yoursite.com/tags/GitHub/"},{"name":"博客","slug":"博客","permalink":"http://yoursite.com/tags/博客/"},{"name":"建站","slug":"建站","permalink":"http://yoursite.com/tags/建站/"}]},{"title":"hello world again","date":"2017-03-01T15:42:22.000Z","path":"2017/03/01/hello-world-again/","text":"这是第一篇自己部署博客之后发布的文章按耐不住自己兴奋的心情 ##连markdown语句有有点乱用的倾向了 好了，我觉得应该可以结束了。","tags":[]},{"title":"Hello World","date":"2017-03-01T15:00:19.276Z","path":"2017/03/01/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]